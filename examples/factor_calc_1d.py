# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
from typing import TypeVar

import polars as pl  # noqa
import polars.selectors as cs  # noqa

# from loguru import logger  # noqa
from polars import DataFrame as _pl_DataFrame
from polars import LazyFrame as _pl_LazyFrame

# ===================================
# 导入优先级，例如：ts_RSI在ta与talib中都出现了，优先使用ta
# 运行时，后导入覆盖前导入，但IDE智能提示是显示先导入的
_ = 0  # 只要之前出现了语句，之后的import位置不参与调整
# from polars_ta.prefix.talib import *  # noqa
from polars_ta.prefix.tdx import *  # noqa
from polars_ta.prefix.ta import *  # noqa
from polars_ta.prefix.wq import *  # noqa
from polars_ta.prefix.cdl import *  # noqa
from polars_ta.prefix.vec import *  # noqa

DataFrame = TypeVar("DataFrame", _pl_LazyFrame, _pl_DataFrame)
# ===================================

_ = ["high_limit", "open", "过去5日平均每分钟成交量", "SIGNAL1", "high", "factor2", "收盘涨停", "最高涨跌", "上海主板", "vwap", "收盘涨跌", "volume", "low", "close_dt", "close", "pre_close", "最大涨幅限制", "创业板", "CLOSE", "circulating_cap", "北交所", "深圳主板", "科创板", "HIGH", "amount"]
[high_limit, open, 过去5日平均每分钟成交量, SIGNAL1, high, factor2, 收盘涨停, 最高涨跌, 上海主板, vwap, 收盘涨跌, volume, low, close_dt, close, pre_close, 最大涨幅限制, 创业板, CLOSE, circulating_cap, 北交所, 深圳主板, 科创板, HIGH, amount] = [pl.col(i) for i in _]

_ = ["OPEN", "LOW", "turnover_ratio", "缩量", "_x_3", "VWAP", "low_limit", "量比", "_x_0", "SIGNAL2", "SIGNAL3"]
[OPEN, LOW, turnover_ratio, 缩量, _x_3, VWAP, low_limit, 量比, _x_0, SIGNAL2, SIGNAL3] = [pl.col(i) for i in _]

_DATE_ = "time"
_ASSET_ = "stock_code"
_NONE_ = None
_TRUE_ = True
_FALSE_ = False


def unpack(x: pl.Expr, idx: int = 0) -> pl.Expr:
    return x.struct[idx]


CS_SW_L1 = r"^sw_l1_\d+$"


def func_0_cl(df: DataFrame) -> DataFrame:
    # ========================================
    df = df.with_columns(
        vwap=amount / (100 * volume),
        OPEN=factor2 * open,
        HIGH=factor2 * high,
        LOW=factor2 * low,
        CLOSE=close * factor2,
        最大涨幅限制=if_else(北交所, 0.3, 0) + if_else(上海主板 | 深圳主板, 0.1, 0) + if_else(创业板 | 科创板, 0.2, 0),
    )
    return df


def func_0_ts__stock_code(df: DataFrame) -> DataFrame:
    # ========================================
    df = df.with_columns(
        turnover_ratio=(volume / ts_delay(circulating_cap, 1)).over(pl.all_horizontal(volume.is_not_null(), circulating_cap.is_not_null()), _ASSET_, order_by=_DATE_),
        过去5日平均每分钟成交量=(ts_delay(ts_sum(volume, 5), 1) / 1200).over(volume.is_not_null(), _ASSET_, order_by=_DATE_),
        缩量=(ts_returns(volume) < -0.1).over(volume.is_not_null(), _ASSET_, order_by=_DATE_),
    )
    # ========================================
    df = df.with_columns(
        _x_3=(1 / ts_delay(CLOSE, 1)).over(CLOSE.is_not_null(), _ASSET_, order_by=_DATE_),
    )
    return df


def func_1_cl(df: DataFrame) -> DataFrame:
    # ========================================
    df = df.with_columns(
        VWAP=factor2 * vwap,
        high_limit=round_(pre_close * (最大涨幅限制 + 1), 2),
        low_limit=round_(-pre_close * (最大涨幅限制 - 1), 2),
        量比=volume / (过去5日平均每分钟成交量 * FROMOPEN_1(close_dt, 60)),
    )
    # ========================================
    df = df.with_columns(
        最高涨跌=HIGH * _x_3 - 1,
        收盘涨跌=CLOSE * _x_3 - 1,
        收盘涨停=close - high_limit >= -0.001,
    )
    # ========================================
    df = df.with_columns(
        _x_0=~收盘涨停,
    )
    return df


def func_2_ts__stock_code(df: DataFrame) -> DataFrame:
    # ========================================
    df = df.with_columns(
        SIGNAL1=(ts_shifts_v3(_x_0, 0, 6, _x_0, 1, 1, 收盘涨停, 1, 3, _x_0, 1, 1)).over(pl.all_horizontal(收盘涨停.is_not_null(), _x_0.is_not_null()), _ASSET_, order_by=_DATE_),
    )
    # ========================================
    df = df.with_columns(
        SIGNAL2=(ts_shifts_v1(最高涨跌 > 0, SIGNAL1)).over(pl.all_horizontal(最高涨跌.is_not_null(), SIGNAL1.is_not_null()), _ASSET_, order_by=_DATE_),
        SIGNAL3=(ts_shifts_v1(收盘涨跌 > 0, SIGNAL1)).over(pl.all_horizontal(SIGNAL1.is_not_null(), 收盘涨跌.is_not_null()), _ASSET_, order_by=_DATE_),
    )
    return df


"""
#========================================func_0_cl
vwap = amount/(100*volume) #
OPEN = factor2*open #
HIGH = factor2*high #
LOW = factor2*low #
CLOSE = close*factor2 #
最大涨幅限制 = if_else(北交所, 0.3, 0) + if_else(上海主板 | 深圳主板, 0.1, 0) + if_else(创业板 | 科创板, 0.2, 0) #
#========================================func_0_ts__stock_code
turnover_ratio = volume/ts_delay(circulating_cap, 1) # 流通股本单位为万股,要换成手,*100转成%，直接省去了/10000
过去5日平均每分钟成交量 = ts_delay(ts_sum(volume, 5), 1)/1200 #
缩量 = ts_returns(volume) < -0.1 #
#========================================func_0_ts__stock_code
_x_3 = 1/ts_delay(CLOSE, 1) #
#========================================func_1_cl
VWAP = factor2*vwap #
high_limit = round_(pre_close*(最大涨幅限制 + 1), 2) #
low_limit = round_(-pre_close*(最大涨幅限制 - 1), 2) #
量比 = volume/(过去5日平均每分钟成交量*FROMOPEN_1(close_dt, 60)) #
#========================================func_1_cl
最高涨跌 = HIGH*_x_3 - 1 #
收盘涨跌 = CLOSE*_x_3 - 1 #
收盘涨停 = close - high_limit >= -0.001 #
#========================================func_1_cl
_x_0 = ~收盘涨停 #
#========================================func_2_ts__stock_code
SIGNAL1 = ts_shifts_v3(_x_0, 0, 6, _x_0, 1, 1, 收盘涨停, 1, 3, _x_0, 1, 1) #
#========================================func_2_ts__stock_code
SIGNAL2 = ts_shifts_v1(最高涨跌 > 0, SIGNAL1) #
SIGNAL3 = ts_shifts_v1(收盘涨跌 > 0, SIGNAL1) #
"""

"""
vwap = amount/((volume*100)) #
VWAP = factor2*vwap #
OPEN = factor2*open #
HIGH = factor2*high #
LOW = factor2*low #
CLOSE = close*factor2 #
最大涨幅限制 = if_else(北交所, 0.3, 0) + if_else(上海主板 | 深圳主板, 0.1, 0) + if_else(创业板 | 科创板, 0.2, 0) #
high_limit = round_(pre_close*(最大涨幅限制 + 1), 2) #
low_limit = round_(pre_close*(1 - 最大涨幅限制), 2) #
turnover_ratio = volume/ts_delay(circulating_cap, 1) # 流通股本单位为万股,要换成手,*100转成%，直接省去了/10000
过去5日平均每分钟成交量 = ts_delay(ts_sum(volume, 5), 1)/((240*5)) #
量比 = volume/(过去5日平均每分钟成交量*FROMOPEN_1(close_dt, 60)) #
收盘涨停 = close >= high_limit - 1*0.001 #
最高涨跌 = HIGH/ts_delay(CLOSE, 1) - 1*1 #
收盘涨跌 = CLOSE/ts_delay(CLOSE, 1) - 1*1 #
缩量 = ts_returns(volume) < -0.1 #
SIGNAL1 = ts_shifts_v3(~收盘涨停, 0, 6, ~收盘涨停, 1, 1, 收盘涨停, 1, 3, ~收盘涨停, 1, 1) #
SIGNAL2 = ts_shifts_v1(最高涨跌 > 0, SIGNAL1) #
SIGNAL3 = ts_shifts_v1(收盘涨跌 > 0, SIGNAL1) #
"""


def _filter_last(df: DataFrame, filter_last: bool) -> DataFrame:
    """过滤数据，只取最后一天。实盘时可用于减少计算量
    前一个调用的ts,这里可以直接调用，可以认为已经排序好
        `df = filter_last(df)`
    反之
        `df = filter_last(df.sort(_DATE_))`
    """
    if filter_last:
        return df.filter(pl.col(_DATE_) >= df.select(pl.last(_DATE_))[0, 0])
    else:
        return df


def main(df: DataFrame, filter_last: bool) -> DataFrame:

    df = func_0_cl(df).drop(*[])
    df = func_0_ts__stock_code(df.sort(_ASSET_, _DATE_)).drop(*[])
    df = func_1_cl(df).drop(*["_x_3"])
    df = func_2_ts__stock_code(df.sort(_ASSET_, _DATE_)).drop(*["_x_0"])
    df = _filter_last(df, filter_last)

    # drop intermediate columns
    # df = df.select(pl.exclude(r'^_x_\d+$'))
    df = df.select(~cs.starts_with("_"))

    # shrink
    df = df.select(cs.all().shrink_dtype())

    return df
